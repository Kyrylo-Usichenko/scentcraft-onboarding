import { SQLPluginResult, BaseSchema, Schemas } from '@xata.io/client';
import * as drizzle_orm from 'drizzle-orm';
import { entityKind, Logger, TablesRelationalConfig, RelationalSchemaConfig, Query, Assume, DrizzleConfig } from 'drizzle-orm';
import * as drizzle_orm_pg_core from 'drizzle-orm/pg-core';
import { PreparedQueryConfig, PreparedQuery, SelectedFieldsOrdered, PgSession, PgDialect, PgTransactionConfig, QueryResultHKT, PgDatabase } from 'drizzle-orm/pg-core';

type QueryResult<T = Record<string, unknown>> = {
    records: T[];
    warning?: string;
};
declare class XataPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private logger;
    private fields;
    private customResultMapper?;
    static readonly [entityKind]: string;
    private query;
    constructor(client: XataClient, queryString: string, params: unknown[], logger: Logger, fields: SelectedFieldsOrdered | undefined, name: string | undefined, customResultMapper?: ((rows: unknown[][]) => T['execute']) | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
    values(placeholderValues?: Record<string, unknown> | undefined): Promise<T['values']>;
}
interface XataSessionOptions {
    logger?: Logger;
}
declare class XataSession<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends PgSession<XataQueryResultHKT, TFullSchema, TSchema> {
    private client;
    private schema;
    private options;
    static readonly [entityKind]: string;
    private logger;
    constructor(client: XataClient, dialect: PgDialect, schema: RelationalSchemaConfig<TSchema> | undefined, options?: XataSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectedFieldsOrdered | undefined, name: string | undefined, customResultMapper?: (rows: unknown[][]) => T['execute']): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<QueryResult>;
    queryObjects<T extends Record<string, unknown>>(query: string, params: unknown[]): Promise<QueryResult<T>>;
    transaction<T>(_transaction: (tx: any) => Promise<T>, _config?: PgTransactionConfig | undefined): Promise<T>;
}
interface XataQueryResultHKT extends QueryResultHKT {
    type: QueryResult<Assume<this['row'], Record<string, unknown>>[]>;
}

type XataDatabase<TSchema extends Record<string, unknown> = Record<string, never>> = PgDatabase<XataQueryResultHKT, TSchema>;
type XataClient = {
    sql: SQLPluginResult;
};
declare function drizzle<TSchema extends Record<string, unknown> = Record<string, never>>(client: XataClient, config?: DrizzleConfig<TSchema>): XataDatabase<TSchema>;

declare function buildTable(schema: Schemas.Table): drizzle_orm_pg_core.PgTableWithColumns<{
    name: string;
    schema: undefined;
    columns: {
        [x: string]: drizzle_orm_pg_core.PgColumn<{
            name: any;
            tableName: string;
            dataType: any;
            columnType: any;
            data: any;
            driverParam: any;
            notNull: boolean;
            hasDefault: boolean;
            enumValues: any;
            baseColumn: drizzle_orm.Column<{
                name: string;
                tableName: string;
                dataType: drizzle_orm.ColumnDataType;
                columnType: string;
                data: unknown;
                driverParam: unknown;
                notNull: false;
                hasDefault: false;
                enumValues: string[] | undefined;
                baseColumn: never;
            }, object, object>;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
type DrizzleModels<T extends readonly BaseSchema[]> = T extends never[] ? Record<string, Record<string, any>> : T extends readonly unknown[] ? T[number] extends {
    name: string;
    columns: readonly unknown[];
} ? {
    [K in T[number]['name']]: ReturnType<typeof buildTable>;
} : never : never;
declare function buildModels<T extends readonly BaseSchema[]>(tables: T): DrizzleModels<T>;

export { type DrizzleModels, type XataClient, type XataDatabase, XataPreparedQuery, type XataQueryResultHKT, XataSession, type XataSessionOptions, buildModels, drizzle };
