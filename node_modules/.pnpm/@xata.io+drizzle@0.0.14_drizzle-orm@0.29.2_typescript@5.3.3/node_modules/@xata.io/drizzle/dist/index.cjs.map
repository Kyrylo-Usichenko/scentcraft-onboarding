{"version":3,"file":"index.cjs","sources":["../src/utils.ts","../src/session.ts","../src/driver.ts","../src/generate.ts"],"sourcesContent":["import { AnyColumn, Column, DriverValueDecoder, SQL, getTableName, is } from 'drizzle-orm';\n\ntype SelectedFieldsOrdered<TColumn extends Column> = {\n  path: string[];\n  field: TColumn | SQL | SQL.Aliased;\n}[];\n\nexport function mapResultRow<TResult>(\n  columns: SelectedFieldsOrdered<AnyColumn>,\n  row: unknown[],\n  joinsNotNullableMap: Record<string, boolean> | undefined\n): TResult {\n  // Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n  const nullifyMap: Record<string, string | false> = {};\n\n  const result = columns.reduce<Record<string, any>>((result, { path, field }, columnIndex) => {\n    let decoder: DriverValueDecoder<unknown, unknown>;\n    if (is(field, Column)) {\n      decoder = field;\n    } else if (is(field, SQL)) {\n      decoder = (field as any).decoder;\n    } else {\n      decoder = (field as any).sql.decoder;\n    }\n    let node = result;\n    for (const [pathChunkIndex, pathChunk] of path.entries()) {\n      if (pathChunkIndex < path.length - 1) {\n        if (!(pathChunk in node)) {\n          node[pathChunk] = {};\n        }\n        node = node[pathChunk];\n      } else {\n        const rawValue = row[columnIndex]!;\n        const value = (node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue));\n\n        if (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n          const objectName = path[0]!;\n          if (!(objectName in nullifyMap)) {\n            nullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n          } else if (\n            typeof nullifyMap[objectName] === 'string' &&\n            nullifyMap[objectName] !== getTableName(field.table)\n          ) {\n            nullifyMap[objectName] = false;\n          }\n        }\n      }\n    }\n    return result;\n  }, {});\n\n  // Nullify all nested objects from nullifyMap that are nullable\n  if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n    for (const [objectName, tableName] of Object.entries(nullifyMap)) {\n      if (typeof tableName === 'string' && !joinsNotNullableMap[tableName]) {\n        result[objectName] = null;\n      }\n    }\n  }\n\n  return result as TResult;\n}\n\nexport const exhaustiveCheck = (x: never): never => {\n  throw new Error(`Unhandled discriminated union member: ${x}`);\n};\n","import {\n  Assume,\n  Logger,\n  NoopLogger,\n  Query,\n  RelationalSchemaConfig,\n  TablesRelationalConfig,\n  entityKind,\n  fillPlaceholders\n} from 'drizzle-orm';\nimport {\n  PgDialect,\n  PgSession,\n  PgTransactionConfig,\n  PreparedQuery,\n  PreparedQueryConfig,\n  QueryResultHKT,\n  SelectedFieldsOrdered\n} from 'drizzle-orm/pg-core';\nimport { XataClient } from './driver';\nimport { mapResultRow } from './utils';\n\ntype QueryResult<T = Record<string, unknown>> = {\n  records: T[];\n  warning?: string;\n};\n\nexport class XataPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {\n  static readonly [entityKind]: string = 'VercelPgPreparedQuery';\n\n  private query: {\n    name: string | undefined;\n    statement: string;\n  };\n\n  constructor(\n    private client: XataClient,\n    queryString: string,\n    private params: unknown[],\n    private logger: Logger,\n    private fields: SelectedFieldsOrdered | undefined,\n    name: string | undefined,\n    private customResultMapper?: (rows: unknown[][]) => T['execute']\n  ) {\n    super();\n\n    this.query = {\n      name,\n      statement: queryString\n    };\n  }\n\n  async execute(placeholderValues: Record<string, unknown> | undefined = {}): Promise<T['execute']> {\n    const params = fillPlaceholders(this.params, placeholderValues);\n\n    this.logger.logQuery(this.query.statement, params);\n\n    const { records = [], warning } = await this.client.sql<Record<string, unknown>>({\n      statement: this.query.statement,\n      params\n    });\n\n    // FIXME: This is a hack, we should be able to get the fields from the query but SELECT * fails\n    const fields =\n      this.fields ??\n      Object.keys(records[0]!).map(\n        (key) =>\n          ({\n            path: [key],\n            field: {\n              sql: {\n                decoder: {\n                  mapFromDriverValue: (value: unknown) => value\n                }\n              }\n            }\n          } as any)\n      );\n\n    if (warning) console.warn(warning);\n    const internalColumnNames = ['xata.version', 'xata.createdAt', 'xata.updatedAt', 'xata.deletedAt'];\n    const rows = records.map((record) =>\n      fields.map((field) => {\n        const pathAsString = field.path.join('.');\n        if (internalColumnNames.includes(pathAsString)) {\n          const [namespaceXata, namespaceColumn]: [string, string] = pathAsString.split('.');\n          return (record[namespaceXata] as Record<string, any>)[namespaceColumn];\n        }\n        return record[pathAsString];\n      })\n    );\n\n    if (this.customResultMapper) {\n      return this.customResultMapper(rows);\n    }\n\n    return rows.map((row) => mapResultRow<T['execute']>(fields, row, undefined));\n  }\n\n  async all(placeholderValues: Record<string, unknown> | undefined = {}): Promise<T['all']> {\n    const params = fillPlaceholders(this.params, placeholderValues);\n    this.logger.logQuery(this.query.statement, params);\n\n    const { records } = await this.client.sql({\n      statement: this.query.statement,\n      params\n    });\n\n    return records;\n  }\n\n  async values(placeholderValues: Record<string, unknown> | undefined = {}): Promise<T['values']> {\n    const params = fillPlaceholders(this.params, placeholderValues);\n    this.logger.logQuery(this.query.statement, params);\n\n    const { records } = await this.client.sql({\n      statement: this.query.statement,\n      params\n    });\n\n    return records;\n  }\n}\n\nexport interface XataSessionOptions {\n  logger?: Logger;\n}\n\nexport class XataSession<\n  TFullSchema extends Record<string, unknown>,\n  TSchema extends TablesRelationalConfig\n> extends PgSession<XataQueryResultHKT, TFullSchema, TSchema> {\n  static readonly [entityKind]: string = 'VercelPgSession';\n\n  private logger: Logger;\n\n  constructor(\n    private client: XataClient,\n    dialect: PgDialect,\n    private schema: RelationalSchemaConfig<TSchema> | undefined,\n    private options: XataSessionOptions = {}\n  ) {\n    super(dialect);\n    this.logger = options.logger ?? new NoopLogger();\n  }\n\n  prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(\n    query: Query,\n    fields: SelectedFieldsOrdered | undefined,\n    name: string | undefined,\n    customResultMapper?: (rows: unknown[][]) => T['execute']\n  ): PreparedQuery<T> {\n    return new XataPreparedQuery(this.client, query.sql, query.params, this.logger, fields, name, customResultMapper);\n  }\n\n  async query(query: string, params: unknown[]): Promise<QueryResult> {\n    this.logger.logQuery(query, params);\n    return await this.client.sql({ statement: query, params });\n  }\n\n  async queryObjects<T extends Record<string, unknown>>(query: string, params: unknown[]): Promise<QueryResult<T>> {\n    return this.client.sql({ statement: query, params });\n  }\n\n  override async transaction<T>(\n    _transaction: (tx: any) => Promise<T>,\n    _config?: PgTransactionConfig | undefined\n  ): Promise<T> {\n    throw new Error('Transactions are not supported');\n  }\n}\n\nexport interface XataQueryResultHKT extends QueryResultHKT {\n  type: QueryResult<Assume<this['row'], Record<string, unknown>>[]>;\n}\n","import { SQLPluginResult } from '@xata.io/client';\nimport {\n  DefaultLogger,\n  DrizzleConfig,\n  RelationalSchemaConfig,\n  TablesRelationalConfig,\n  createTableRelationsHelpers,\n  extractTablesRelationalConfig\n} from 'drizzle-orm';\nimport { PgDatabase, PgDialect } from 'drizzle-orm/pg-core';\nimport { XataQueryResultHKT, XataSession } from './session';\n\nexport type XataDatabase<TSchema extends Record<string, unknown> = Record<string, never>> = PgDatabase<\n  XataQueryResultHKT,\n  TSchema\n>;\n\nexport type XataClient = {\n  sql: SQLPluginResult;\n};\n\nexport function drizzle<TSchema extends Record<string, unknown> = Record<string, never>>(\n  client: XataClient,\n  config: DrizzleConfig<TSchema> = {}\n): XataDatabase<TSchema> {\n  const dialect = new PgDialect();\n  let logger;\n  if (config.logger === true) {\n    logger = new DefaultLogger();\n  } else if (config.logger !== false) {\n    logger = config.logger;\n  }\n\n  let schema: RelationalSchemaConfig<TablesRelationalConfig> | undefined;\n  if (config.schema) {\n    const tablesConfig = extractTablesRelationalConfig(config.schema, createTableRelationsHelpers);\n    schema = {\n      fullSchema: config.schema,\n      schema: tablesConfig.tables,\n      tableNamesMap: tablesConfig.tableNamesMap\n    };\n  }\n\n  const session = new XataSession(client, dialect, schema, { logger });\n  return new PgDatabase(dialect, session, schema) as XataDatabase<TSchema>;\n}\n","import { BaseSchema, Schemas } from '@xata.io/client';\nimport { boolean, date, decimal, integer, pgTable, text } from 'drizzle-orm/pg-core';\nimport { exhaustiveCheck } from './utils';\n\nfunction buildColumnType(column: Schemas.Column) {\n  switch (column.type) {\n    case 'string':\n    case 'text':\n    case 'email':\n    case 'link':\n      return text(column.name);\n    case 'bool':\n      return boolean(column.name);\n    case 'int':\n      return integer(column.name);\n    case 'float':\n      return decimal(column.name);\n    case 'datetime':\n      return date(column.name);\n    case 'multiple':\n    case 'object':\n    case 'vector':\n    case 'file[]':\n    case 'file':\n    case 'json':\n      throw new Error(`Unsupported column type: ${column.type}`);\n    default:\n      return exhaustiveCheck(column.type);\n  }\n}\n\nfunction buildColumn(column: Schemas.Column) {\n  let type = buildColumnType(column);\n\n  if (column.notNull) {\n    type = type.notNull();\n  }\n\n  if (column.unique) {\n    type = type.unique();\n  }\n\n  return type;\n}\n\nfunction buildTable(schema: Schemas.Table) {\n  const columns = schema.columns.map((column) => [column.name, buildColumn(column)]);\n  const definition = { id: text('id'), ...Object.fromEntries(columns) };\n  return pgTable(schema.name, definition);\n}\n\nexport type DrizzleModels<T extends readonly BaseSchema[]> = T extends never[]\n  ? Record<string, Record<string, any>>\n  : T extends readonly unknown[]\n  ? T[number] extends { name: string; columns: readonly unknown[] }\n    ? {\n        [K in T[number]['name']]: ReturnType<typeof buildTable>;\n      }\n    : never\n  : never;\n\nexport function buildModels<T extends readonly BaseSchema[]>(tables: T): DrizzleModels<T> {\n  const entries = tables.map((table) => [table.name, buildTable(table as Schemas.Table)]);\n  return Object.fromEntries(entries);\n}\n"],"names":["result","is","Column","SQL","getTableName","PreparedQuery","fillPlaceholders","entityKind","PgSession","NoopLogger","PgDialect","DefaultLogger","extractTablesRelationalConfig","createTableRelationsHelpers","PgDatabase","text","boolean","integer","decimal","date","pgTable"],"mappings":"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"}